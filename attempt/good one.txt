    model = tf.keras.Sequential()
    model.add(tf.keras.layers.LSTM(150, input_shape=(win_length, num_features),
                                   return_sequences=True))  # take every obs into account
    model.add(tf.keras.layers.LeakyReLU(alpha=0.5))
    model.add(tf.keras.layers.LSTM(50, return_sequences=True))
    model.add(tf.keras.layers.LeakyReLU(alpha=0.5))  # activation function
    model.add(tf.keras.layers.Dropout(0.3))  # make sure not overfit
    model.add(tf.keras.layers.LSTM(20, return_sequences=False))  # return only one hidden state
    model.add(tf.keras.layers.Dropout(0.5))

    model.add(tf.keras.layers.Dense(1, activation='sigmoid')) #to check
    print(model.summary())

    model.compile(loss=tf.keras.losses.MeanSquaredError(), optimizer=tf.optimizers.Adam(), metrics=["accuracy"])
    # history = model.fit(train_generator, epochs=650, validation_data=test_generator, shuffle=False)